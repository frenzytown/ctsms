// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.phoenixctms.ctsms.compare.VOIDComparator;
import org.phoenixctms.ctsms.enumeration.HyperlinkModule;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CoreUtil;
import org.phoenixctms.ctsms.vo.CourseOutVO;
import org.phoenixctms.ctsms.vo.DepartmentVO;
import org.phoenixctms.ctsms.vo.HyperlinkCategoryVO;
import org.phoenixctms.ctsms.vo.HyperlinkInVO;
import org.phoenixctms.ctsms.vo.HyperlinkOutVO;
import org.phoenixctms.ctsms.vo.InventoryOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see Hyperlink
 */
public class HyperlinkDaoImpl
		extends HyperlinkDaoBase {

	private final static VOIDComparator DEPARTMENT_ID_COMPARATOR = new VOIDComparator<DepartmentVO>(false);

	private static void applyIdCriterion(org.hibernate.Criteria criteria, HyperlinkModule module, Long id) {
		if (id != null) {
			switch (module) {
				case INVENTORY_HYPERLINK:
					criteria.add(Restrictions.eq("inventory.id", id.longValue()));
					break;
				case STAFF_HYPERLINK:
					criteria.add(Restrictions.eq("staff.id", id.longValue()));
					break;
				case COURSE_HYPERLINK:
					criteria.add(Restrictions.eq("course.id", id.longValue()));
					break;
				case TRIAL_HYPERLINK:
					criteria.add(Restrictions.eq("trial.id", id.longValue()));
					break;
				default:
			}
		}
	}

	private static void applyModuleIdCriterions(org.hibernate.Criteria criteria, HyperlinkModule module, Long id) {
		if (module != null) {
			criteria.createCriteria("category").add(Restrictions.eq("module", module));
			applyIdCriterion(criteria, module, id);
		}
	}

	private static void applyModuleIdCriterions(SubCriteriaMap criteriaMap, HyperlinkModule module, Long id) {
		if (module != null) {
			criteriaMap.createCriteria("category").add(Restrictions.eq("module", module));
			applyIdCriterion(criteriaMap.getCriteria(), module, id);
		}
	}

	private final static void applyActiveCriterion(org.hibernate.Criteria criteria, Boolean active) {
		if (active != null) {
			User user = CoreUtil.getUser();
			if (user != null) {
				if (active) {
					DetachedCriteria subQuery = DetachedCriteria.forClass(HyperlinkImpl.class, "hyperlink1"); // IMPL!!!!
					subQuery.setProjection(Projections.id());
					subQuery.add(Restrictions.eqProperty("id", "hyperlink0.id"));
					subQuery.createCriteria("departments").add(Restrictions.idEq(user.getDepartment().getId().longValue()));
					criteria.add(Restrictions.or(
							Restrictions.and(
									Restrictions.eq("active", true),
									Subqueries.exists(subQuery)),
							Restrictions.eq("modifiedUser.id", user.getId().longValue())));
				} else {
					criteria.add(Restrictions.or(
							Restrictions.eq("active", false),
							Restrictions.eq("modifiedUser.id", user.getId().longValue())));
				}
			} else {
				criteria.add(Restrictions.eq("active", active.booleanValue()));
			}
		}
	}

	private org.hibernate.Criteria createHyperLinkCriteria(String alias) {
		org.hibernate.Criteria hyperlinkCriteria;
		if (alias != null && alias.length() > 0) {
			hyperlinkCriteria = this.getSession().createCriteria(Hyperlink.class, alias);
		} else {
			hyperlinkCriteria = this.getSession().createCriteria(Hyperlink.class);
		}
		return hyperlinkCriteria;
	}

	@Override
	protected Collection<Hyperlink> handleFindHyperlinks(
			HyperlinkModule module, Long id, Boolean active, PSFVO psf) throws Exception {
		org.hibernate.Criteria hyperlinkCriteria = createHyperLinkCriteria("hyperlink0");
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Hyperlink.class, hyperlinkCriteria);
		applyActiveCriterion(hyperlinkCriteria, active);
		applyModuleIdCriterions(criteriaMap, module, id);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return hyperlinkCriteria.list();
	}

	@Override
	protected long handleGetCount(
			HyperlinkModule module, Long id, Boolean active) throws Exception {
		org.hibernate.Criteria hyperlinkCriteria = createHyperLinkCriteria("hyperlink0");
		applyActiveCriterion(hyperlinkCriteria, active);
		applyModuleIdCriterions(hyperlinkCriteria, module, id);
		return (Long) hyperlinkCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Hyperlink hyperlinkInVOToEntity(HyperlinkInVO hyperlinkInVO) {
		Hyperlink entity = this.loadHyperlinkFromHyperlinkInVO(hyperlinkInVO);
		this.hyperlinkInVOToEntity(hyperlinkInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void hyperlinkInVOToEntity(
			HyperlinkInVO source,
			Hyperlink target,
			boolean copyIfNull) {
		super.hyperlinkInVOToEntity(source, target, copyIfNull);
		Long categoryId = source.getCategoryId();
		Long inventoryId = source.getInventoryId();
		Long staffId = source.getStaffId();
		Long courseId = source.getCourseId();
		Long trialId = source.getTrialId();
		if (categoryId != null) {
			target.setCategory(this.getHyperlinkCategoryDao().load(categoryId));
		} else if (copyIfNull) {
			target.setCategory(null);
		}
		if (inventoryId != null) {
			Inventory inventory = this.getInventoryDao().load(inventoryId);
			target.setInventory(inventory);
			inventory.addHyperlinks(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeHyperlinks(target);
			}
		}
		if (staffId != null) {
			Staff staff = this.getStaffDao().load(staffId);
			target.setStaff(staff);
			staff.addHyperlinks(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeHyperlinks(target);
			}
		}
		if (courseId != null) {
			Course course = this.getCourseDao().load(courseId);
			target.setCourse(course);
			course.addHyperlinks(target);
		} else if (copyIfNull) {
			Course course = target.getCourse();
			target.setCourse(null);
			if (course != null) {
				course.removeHyperlinks(target);
			}
		}
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addHyperlinks(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeHyperlinks(target);
			}
		}
		Collection departmentIds;
		if ((departmentIds = source.getDepartmentIds()).size() > 0 || copyIfNull) {
			target.setDepartments(toDepartmentSet(departmentIds));
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Hyperlink hyperlinkOutVOToEntity(HyperlinkOutVO hyperlinkOutVO) {
		Hyperlink entity = this.loadHyperlinkFromHyperlinkOutVO(hyperlinkOutVO);
		this.hyperlinkOutVOToEntity(hyperlinkOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void hyperlinkOutVOToEntity(
			HyperlinkOutVO source,
			Hyperlink target,
			boolean copyIfNull) {
		super.hyperlinkOutVOToEntity(source, target, copyIfNull);
		HyperlinkCategoryVO categoryVO = source.getCategory();
		InventoryOutVO inventoryVO = source.getInventory();
		StaffOutVO staffVO = source.getStaff();
		CourseOutVO courseVO = source.getCourse();
		TrialOutVO trialVO = source.getTrial();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (categoryVO != null) {
			target.setCategory(this.getHyperlinkCategoryDao().hyperlinkCategoryVOToEntity(categoryVO));
		} else if (copyIfNull) {
			target.setCategory(null);
		}
		if (inventoryVO != null) {
			Inventory inventory = this.getInventoryDao().inventoryOutVOToEntity(inventoryVO);
			target.setInventory(inventory);
			inventory.addHyperlinks(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeHyperlinks(target);
			}
		}
		if (staffVO != null) {
			Staff staff = this.getStaffDao().staffOutVOToEntity(staffVO);
			target.setStaff(staff);
			staff.addHyperlinks(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeHyperlinks(target);
			}
		}
		if (courseVO != null) {
			Course course = this.getCourseDao().courseOutVOToEntity(courseVO);
			target.setCourse(course);
			course.addHyperlinks(target);
		} else if (copyIfNull) {
			Course course = target.getCourse();
			target.setCourse(null);
			if (course != null) {
				course.removeHyperlinks(target);
			}
		}
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addHyperlinks(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeHyperlinks(target);
			}
		}
		Collection departments = source.getDepartments();
		if (departments.size() > 0) {
			departments = new ArrayList(departments); //prevent changing VO
			this.getDepartmentDao().departmentVOToEntityCollection(departments);
			target.setDepartments(departments); // hashset-exception!!!
		} else if (copyIfNull) {
			target.getDepartments().clear();
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Hyperlink loadHyperlinkFromHyperlinkInVO(HyperlinkInVO hyperlinkInVO) {
		Hyperlink hyperlink = null;
		Long id = hyperlinkInVO.getId();
		if (id != null) {
			hyperlink = this.load(id);
		}
		if (hyperlink == null) {
			hyperlink = Hyperlink.Factory.newInstance();
		}
		return hyperlink;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Hyperlink loadHyperlinkFromHyperlinkOutVO(HyperlinkOutVO hyperlinkOutVO) {
		Hyperlink hyperlink = this.load(hyperlinkOutVO.getId());
		if (hyperlink == null) {
			hyperlink = Hyperlink.Factory.newInstance();
		}
		return hyperlink;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public HyperlinkInVO toHyperlinkInVO(final Hyperlink entity) {
		return super.toHyperlinkInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toHyperlinkInVO(
			Hyperlink source,
			HyperlinkInVO target) {
		super.toHyperlinkInVO(source, target);
		HyperlinkCategory category = source.getCategory();
		Inventory inventory = source.getInventory();
		Staff staff = source.getStaff();
		Course course = source.getCourse();
		Trial trial = source.getTrial();
		if (category != null) {
			target.setCategoryId(category.getId());
		}
		if (inventory != null) {
			target.setInventoryId(inventory.getId());
		}
		if (staff != null) {
			target.setStaffId(staff.getId());
		}
		if (course != null) {
			target.setCourseId(course.getId());
		}
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		target.setDepartmentIds(toDepartmentIdCollection(source.getDepartments()));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public HyperlinkOutVO toHyperlinkOutVO(final Hyperlink entity) {
		return super.toHyperlinkOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toHyperlinkOutVO(
			Hyperlink source,
			HyperlinkOutVO target) {
		super.toHyperlinkOutVO(source, target);
		HyperlinkCategory category = source.getCategory();
		Inventory inventory = source.getInventory();
		Staff staff = source.getStaff();
		Course course = source.getCourse();
		Trial trial = source.getTrial();
		User modifiedUser = source.getModifiedUser();
		if (category != null) {
			target.setCategory(this.getHyperlinkCategoryDao().toHyperlinkCategoryVO(category));
		}
		if (inventory != null) {
			target.setInventory(this.getInventoryDao().toInventoryOutVO(inventory));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (course != null) {
			target.setCourse(this.getCourseDao().toCourseOutVO(course));
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		target.setDepartments(toDepartmentVOCollection(source.getDepartments()));
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}

	private static ArrayList<Long> toDepartmentIdCollection(Collection<Department> departments) { // lazyload persistentset prevention
		ArrayList<Long> result = new ArrayList<Long>(departments.size());
		Iterator<Department> it = departments.iterator();
		while (it.hasNext()) {
			result.add(it.next().getId());
		}
		Collections.sort(result); // InVO ID sorting
		return result;
	}

	private ArrayList<DepartmentVO> toDepartmentVOCollection(Collection<Department> departments) { // lazyload persistentset prevention
		// related to http://forum.andromda.org/viewtopic.php?t=4288
		DepartmentDao departmentDao = this.getDepartmentDao();
		ArrayList<DepartmentVO> result = new ArrayList<DepartmentVO>(departments.size());
		Iterator<Department> it = departments.iterator();
		while (it.hasNext()) {
			result.add(departmentDao.toDepartmentVO(it.next()));
		}
		Collections.sort(result, DEPARTMENT_ID_COMPARATOR);
		return result;
	}

	private HashSet<Department> toDepartmentSet(Collection<Long> departmentIds) { // lazyload persistentset prevention
		DepartmentDao departmentDao = this.getDepartmentDao();
		HashSet<Department> result = new HashSet<Department>(departmentIds.size());
		Iterator<Long> it = departmentIds.iterator();
		while (it.hasNext()) {
			result.add(departmentDao.load(it.next()));
		}
		return result;
	}
}
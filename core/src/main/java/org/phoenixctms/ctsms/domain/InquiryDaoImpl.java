// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.text.MessageFormat;
import java.util.Collection;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Junction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.InputFieldOutVO;
import org.phoenixctms.ctsms.vo.InquiryInVO;
import org.phoenixctms.ctsms.vo.InquiryOutVO;
import org.phoenixctms.ctsms.vo.LightInquiryOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see Inquiry
 */
public class InquiryDaoImpl
		extends InquiryDaoBase {

	private static final String UNIQUE_CATEGORY_INQUIRY_NAME = "{0} - {1} - {2}. {3}";
	private static final String UNIQUE_INQUIRY_NAME = "{0} - {1}. {2}";

	private static void applySortOrders(org.hibernate.Criteria inquiryCriteria) {
		if (inquiryCriteria != null) {
			inquiryCriteria.addOrder(Order.asc("trial"));
			inquiryCriteria.addOrder(Order.asc("category"));
			inquiryCriteria.addOrder(Order.asc("position"));
		}
	}

	private static String getUniqueInquiryName(Inquiry inquiry) {
		Trial trial;
		InputField field;
		if (inquiry != null && (trial = inquiry.getTrial()) != null && (field = inquiry.getField()) != null) {
			String category = inquiry.getCategory();
			String inputFieldName;
			if (field.isLocalized()) {
				inputFieldName = L10nUtil.getInputFieldName(Locales.USER, field.getNameL10nKey());
			} else {
				inputFieldName = field.getNameL10nKey();
			}
			if (category != null && category.length() > 0) {
				return MessageFormat.format(UNIQUE_CATEGORY_INQUIRY_NAME, trial.getName(), category, Long.toString(inquiry.getPosition()), inputFieldName);
			} else {
				return MessageFormat.format(UNIQUE_INQUIRY_NAME, trial.getName(), Long.toString(inquiry.getPosition()), inputFieldName);
			}
		}
		return null;
	}

	private static String getUniqueInquiryName(InquiryOutVO inquiryVO) {
		if (inquiryVO != null && inquiryVO.getTrial() != null && inquiryVO.getField() != null) {
			String category = inquiryVO.getCategory();
			if (category != null && category.length() > 0) {
				return MessageFormat.format(UNIQUE_CATEGORY_INQUIRY_NAME, inquiryVO.getTrial().getName(), category, Long.toString(inquiryVO.getPosition()), inquiryVO.getField()
						.getName());
			} else {
				return MessageFormat.format(UNIQUE_INQUIRY_NAME, inquiryVO.getTrial().getName(), Long.toString(inquiryVO.getPosition()), inquiryVO.getField().getName());
			}
		}
		return null;
	}

	private org.hibernate.Criteria createInquiryCriteria() {
		org.hibernate.Criteria inquiryCriteria = this.getSession().createCriteria(Inquiry.class);
		return inquiryCriteria;
	}

	@Override
	protected Collection<Inquiry> handleFindAllSorted() throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		applySortOrders(inquiryCriteria);
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<Inquiry> handleFindAllSorted(String nameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (!CommonUtil.isEmptyString(nameInfix)) {
			org.hibernate.Criteria trialCriteria = inquiryCriteria.createCriteria("trial", "trial0", CriteriaSpecification.INNER_JOIN);
			org.hibernate.Criteria fieldCriteria = inquiryCriteria.createCriteria("field", "inputField", CriteriaSpecification.INNER_JOIN);
			Junction junction = Restrictions.disjunction();
			junction.add((new CategoryCriterion(nameInfix, "category", MatchMode.ANYWHERE)).getRestriction());
			junction.add((new CategoryCriterion(nameInfix, "inputField.nameL10nKey", MatchMode.ANYWHERE)).getRestriction());
			junction.add((new CategoryCriterion(nameInfix, "inputField.titleL10nKey", MatchMode.ANYWHERE)).getRestriction());
			junction.add((new CategoryCriterion(nameInfix, "trial0.name", MatchMode.ANYWHERE)).getRestriction());
			junction.add((new CategoryCriterion(nameInfix, "titleL10nKey", MatchMode.ANYWHERE)).getRestriction());
			inquiryCriteria.add(junction);
		}
		applySortOrders(inquiryCriteria);
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.INQUIRY_FIELD_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.INQUIRY_FIELD_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), inquiryCriteria);
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<Inquiry> handleFindByDepartmentActiveExcelSorted(Long departmentId, Boolean active, Boolean activeSignup, Boolean excel, Boolean values) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (departmentId != null) {
			inquiryCriteria.createCriteria("trial").add(Restrictions.eq("department.id", departmentId.longValue()));
		}
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		if (excel != null) {
			inquiryCriteria.add(Restrictions.or(Restrictions.eq("excelValue", excel.booleanValue()),
					Restrictions.eq("excelDate", excel.booleanValue())));
		}
		if (values != null) {
			if (values) {
				inquiryCriteria.add(Restrictions.sizeGt("inquiryValues", 0));
			} else {
				inquiryCriteria.add(Restrictions.sizeEq("inquiryValues", 0));
			}
		}
		applySortOrders(inquiryCriteria);
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<Inquiry> handleFindByParticipantsActiveSorted(Long trialId, Boolean active, Boolean activeSignup) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		if (trialId != null) {
			inquiryCriteria.createCriteria("inquiryValues", CriteriaSpecification.INNER_JOIN).createCriteria("proband", CriteriaSpecification.INNER_JOIN)
					.createCriteria("trialParticipations", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		applySortOrders(inquiryCriteria);
		return CriteriaUtil.listDistinctRoot(inquiryCriteria, this, "trial.id", "category", "position");
	}

	@Override
	protected Collection<Inquiry> handleFindByTrialActiveExcelProbandSorted(Long trialId, Boolean active, Boolean activeSignup, Boolean excel, Long probandId) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		if (excel != null) {
			inquiryCriteria.add(Restrictions.or(Restrictions.eq("excelValue", excel.booleanValue()),
					Restrictions.eq("excelDate", excel.booleanValue())));
		}
		if (probandId != null) {
			inquiryCriteria.createCriteria("inquiryValues", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		applySortOrders(inquiryCriteria);
		return CriteriaUtil.listDistinctRoot(inquiryCriteria, this, "trial.id", "category", "position");
	}

	@Override
	protected Collection<Inquiry> handleFindByTrialActiveJs(Long trialId,
			Boolean active, Boolean activeSignup, boolean sort, Boolean js, PSFVO psf) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Inquiry.class, inquiryCriteria);
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		if (js != null) {
			if (js) {
				inquiryCriteria.add(Restrictions.and(Restrictions.ne("jsVariableName", ""), Restrictions.isNotNull("jsVariableName")));
			} else {
				inquiryCriteria.add(Restrictions.or(Restrictions.eq("jsVariableName", ""), Restrictions.isNull("jsVariableName")));
			}
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(inquiryCriteria);
		}
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<Inquiry> handleFindByTrialCategoryActiveJs(Long trialId,
			String category, Boolean active, Boolean activeSignup, boolean sort, Boolean js, PSFVO psf) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Inquiry.class, inquiryCriteria);
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		if (category != null && category.length() > 0) {
			inquiryCriteria.add(Restrictions.eq("category", category));
		} else {
			inquiryCriteria.add(Restrictions.or(Restrictions.eq("category", ""), Restrictions.isNull("category")));
		}
		if (js != null) {
			if (js) {
				inquiryCriteria.add(Restrictions.and(Restrictions.ne("jsVariableName", ""), Restrictions.isNotNull("jsVariableName")));
			} else {
				inquiryCriteria.add(Restrictions.or(Restrictions.eq("jsVariableName", ""), Restrictions.isNull("jsVariableName")));
			}
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(inquiryCriteria);
		}
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<Inquiry> handleFindByTrialCategoryPosition(Long trialId, String category,
			Long position) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (category != null && category.length() > 0) {
			inquiryCriteria.add(Restrictions.eq("category", category));
		} else {
			inquiryCriteria.add(Restrictions.or(Restrictions.eq("category", ""), Restrictions.isNull("category")));
		}
		if (position != null) {
			inquiryCriteria.add(Restrictions.eq("position", position.longValue()));
		}
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<Inquiry> handleFindByTrialField(Long trialId,
			Long fieldId, PSFVO psf) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Inquiry.class, inquiryCriteria);
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (fieldId != null) {
			inquiryCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<Inquiry> handleFindByTrialJsVariableName(Long trialId,
			String jsVariableName) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		inquiryCriteria.add(Restrictions.eq("jsVariableName", jsVariableName));
		return inquiryCriteria.list();
	}

	@Override
	protected Collection<String> handleFindCategories(Long trialId,
			String categoryPrefix, Boolean active, Boolean activeSignup, Integer limit) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		CategoryCriterion.apply(inquiryCriteria, new CategoryCriterion(categoryPrefix, "category", MatchMode.START));
		inquiryCriteria.addOrder(Order.asc("category"));
		inquiryCriteria.setProjection(Projections.distinct(Projections.property("category")));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.INQUIRY_CATEGORY_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.INQUIRY_CATEGORY_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), inquiryCriteria);
		return inquiryCriteria.list();
	}

	@Override
	protected Long handleFindMaxPosition(Long trialId, String category) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (category != null && category.length() > 0) {
			inquiryCriteria.add(Restrictions.eq("category", category));
		} else {
			inquiryCriteria.add(Restrictions.or(Restrictions.eq("category", ""), Restrictions.isNull("category")));
		}
		inquiryCriteria.setProjection(Projections.max("position"));
		return (Long) inquiryCriteria.uniqueResult();
	}

	@Override
	protected long handleGetCount(Long trialId, Boolean active, Boolean activeSignup) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		return (Long) inquiryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long trialId,
			String category, Boolean active, Boolean activeSignup) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (trialId != null) {
			inquiryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			inquiryCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (activeSignup != null) {
			inquiryCriteria.add(Restrictions.eq("activeSignup", activeSignup.booleanValue()));
		}
		if (category != null && category.length() > 0) {
			inquiryCriteria.add(Restrictions.eq("category", category));
		} else {
			inquiryCriteria.add(Restrictions.or(Restrictions.eq("category", ""), Restrictions.isNull("category")));
		}
		return (Long) inquiryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCountByField(Long inputFieldId) throws Exception {
		org.hibernate.Criteria inquiryCriteria = createInquiryCriteria();
		if (inputFieldId != null) {
			inquiryCriteria.add(Restrictions.eq("field.id", inputFieldId.longValue()));
		}
		return (Long) inquiryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Inquiry inquiryInVOToEntity(InquiryInVO inquiryInVO) {
		Inquiry entity = this.loadInquiryFromInquiryInVO(inquiryInVO);
		this.inquiryInVOToEntity(inquiryInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inquiryInVOToEntity(
			InquiryInVO source,
			Inquiry target,
			boolean copyIfNull) {
		super.inquiryInVOToEntity(source, target, copyIfNull);
		target.setTitleL10nKey(source.getTitle());
		Long fieldId = source.getFieldId();
		Long trialId = source.getTrialId();
		if (fieldId != null) {
			InputField field = this.getInputFieldDao().load(fieldId);
			target.setField(field);
			field.addInquiries(target);
		} else if (copyIfNull) {
			InputField field = target.getField();
			target.setField(null);
			if (field != null) {
				field.removeInquiries(target);
			}
		}
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addInquiries(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeInquiries(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Inquiry inquiryOutVOToEntity(InquiryOutVO inquiryOutVO) {
		Inquiry entity = this.loadInquiryFromInquiryOutVO(inquiryOutVO);
		this.inquiryOutVOToEntity(inquiryOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inquiryOutVOToEntity(
			InquiryOutVO source,
			Inquiry target,
			boolean copyIfNull) {
		super.inquiryOutVOToEntity(source, target, copyIfNull);
		TrialOutVO trialVO = source.getTrial();
		InputFieldOutVO fieldVO = source.getField();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addInquiries(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeInquiries(target);
			}
		}
		if (fieldVO != null) {
			InputField field = this.getInputFieldDao().inputFieldOutVOToEntity(fieldVO);
			target.setField(field);
			field.addInquiries(target);
		} else if (copyIfNull) {
			InputField field = target.getField();
			target.setField(null);
			if (field != null) {
				field.removeInquiries(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Inquiry lightInquiryOutVOToEntity(LightInquiryOutVO lightInquiryOutVO) {
		Inquiry entity = this.loadInquiryFromLightInquiryOutVO(lightInquiryOutVO);
		this.lightInquiryOutVOToEntity(lightInquiryOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void lightInquiryOutVOToEntity(
			LightInquiryOutVO source,
			Inquiry target,
			boolean copyIfNull) {
		super.lightInquiryOutVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Inquiry loadInquiryFromInquiryInVO(InquiryInVO inquiryInVO) {
		Inquiry inquiry = null;
		Long id = inquiryInVO.getId();
		if (id != null) {
			inquiry = this.load(id);
		}
		if (inquiry == null) {
			inquiry = Inquiry.Factory.newInstance();
		}
		return inquiry;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Inquiry loadInquiryFromInquiryOutVO(InquiryOutVO inquiryOutVO) {
		Inquiry inquiry = this.load(inquiryOutVO.getId());
		if (inquiry == null) {
			inquiry = Inquiry.Factory.newInstance();
		}
		return inquiry;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Inquiry loadInquiryFromLightInquiryOutVO(LightInquiryOutVO lightInquiryOutVO) {
		Inquiry inquiry = this.load(lightInquiryOutVO.getId());
		if (inquiry == null) {
			inquiry = Inquiry.Factory.newInstance();
		}
		return inquiry;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InquiryInVO toInquiryInVO(final Inquiry entity) {
		return super.toInquiryInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInquiryInVO(
			Inquiry source,
			InquiryInVO target) {
		super.toInquiryInVO(source, target);
		target.setTitle(source.getTitleL10nKey());
		Trial trial = source.getTrial();
		InputField field = source.getField();
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		if (field != null) {
			target.setFieldId(field.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InquiryOutVO toInquiryOutVO(final Inquiry entity) {
		return super.toInquiryOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInquiryOutVO(
			Inquiry source,
			InquiryOutVO target) {
		super.toInquiryOutVO(source, target);
		Trial trial = source.getTrial();
		InputField field = source.getField();
		User modifiedUser = source.getModifiedUser();
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		target.setTitle(source.getTitleL10nKey());
		if (field != null) {
			target.setField(this.getInputFieldDao().toInputFieldOutVO(field));
			if (field.isLocalized()) {
				target.setTitle(L10nUtil.getInputFieldTitle(Locales.USER, source.getTitleL10nKey()));
			}
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setUniqueName(getUniqueInquiryName(target));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public LightInquiryOutVO toLightInquiryOutVO(final Inquiry entity) {
		return super.toLightInquiryOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toLightInquiryOutVO(
			Inquiry source,
			LightInquiryOutVO target) {
		super.toLightInquiryOutVO(source, target);
		target.setUniqueName(getUniqueInquiryName(source));
	}
}
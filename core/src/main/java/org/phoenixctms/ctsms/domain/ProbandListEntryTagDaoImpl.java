// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.text.MessageFormat;
import java.util.Collection;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Junction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.InputFieldOutVO;
import org.phoenixctms.ctsms.vo.LightProbandListEntryTagOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandListEntryTagInVO;
import org.phoenixctms.ctsms.vo.ProbandListEntryTagOutVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see ProbandListEntryTag
 */
public class ProbandListEntryTagDaoImpl
		extends ProbandListEntryTagDaoBase {

	private static final String UNIQUE_PROBAND_LIST_ENTRY_TAG_NAME = "{0} - {1}. {2}";

	private static void applySortOrders(org.hibernate.Criteria listEntryTagCriteria) {
		if (listEntryTagCriteria != null) {
			listEntryTagCriteria.addOrder(Order.asc("trial"));
			listEntryTagCriteria.addOrder(Order.asc("position"));
		}
	}

	private static String getUniqueProbandListEntryTagName(ProbandListEntryTag probandListEntryTag) {
		Trial trial;
		InputField field;
		if (probandListEntryTag != null && (trial = probandListEntryTag.getTrial()) != null && (field = probandListEntryTag.getField()) != null) {
			String inputFieldName;
			if (field.isLocalized()) {
				inputFieldName = L10nUtil.getInputFieldName(Locales.USER, field.getNameL10nKey());
			} else {
				inputFieldName = field.getNameL10nKey();
			}
			return MessageFormat.format(UNIQUE_PROBAND_LIST_ENTRY_TAG_NAME, trial.getName(), Long.toString(probandListEntryTag.getPosition()), inputFieldName);
		}
		return null;
	}

	private static String getUniqueProbandListEntryTagName(ProbandListEntryTagOutVO probandListEntryTagVO) {
		if (probandListEntryTagVO != null && probandListEntryTagVO.getTrial() != null && probandListEntryTagVO.getField() != null) {
			return MessageFormat.format(UNIQUE_PROBAND_LIST_ENTRY_TAG_NAME, probandListEntryTagVO.getTrial().getName(), Long.toString(probandListEntryTagVO.getPosition()),
					probandListEntryTagVO.getField().getName());
		}
		return null;
	}

	private org.hibernate.Criteria createListEntryTagCriteria() {
		org.hibernate.Criteria listEntryTagCriteria = this.getSession().createCriteria(ProbandListEntryTag.class);
		return listEntryTagCriteria;
	}

	@Override
	protected Collection<ProbandListEntryTag> handleFindAllSorted() throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		applySortOrders(listEntryTagCriteria);
		return listEntryTagCriteria.list();
	}

	@Override
	protected Collection<ProbandListEntryTag> handleFindListEntryTags(Long trialId, String nameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (!CommonUtil.isEmptyString(nameInfix)) {
			org.hibernate.Criteria trialCriteria = listEntryTagCriteria.createCriteria("trial", "trial0", CriteriaSpecification.INNER_JOIN);
			org.hibernate.Criteria fieldCriteria = listEntryTagCriteria.createCriteria("field", "inputField", CriteriaSpecification.INNER_JOIN);
			Junction junction = Restrictions.disjunction();
			junction.add((new CategoryCriterion(nameInfix, "inputField.nameL10nKey", MatchMode.ANYWHERE)).getRestriction());
			junction.add((new CategoryCriterion(nameInfix, "inputField.titleL10nKey", MatchMode.ANYWHERE)).getRestriction());
			junction.add((new CategoryCriterion(nameInfix, "trial0.name", MatchMode.ANYWHERE)).getRestriction());
			junction.add((new CategoryCriterion(nameInfix, "titleL10nKey", MatchMode.ANYWHERE)).getRestriction());
			listEntryTagCriteria.add(junction);
		}
		applySortOrders(listEntryTagCriteria);
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.PROBAND_LIST_ENTRY_TAG_FIELD_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.PROBAND_LIST_ENTRY_TAG_FIELD_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), listEntryTagCriteria);
		return listEntryTagCriteria.list();
	}

	@Override
	protected Collection<ProbandListEntryTag> handleFindByTrialExcelEcrfStratificationProbandSorted(Long trialId, Boolean excel, Boolean ecrf, Boolean stratification,
			Long probandId)
			throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (excel != null) {
			listEntryTagCriteria.add(Restrictions.or(Restrictions.eq("excelValue", excel.booleanValue()),
					Restrictions.eq("excelDate", excel.booleanValue())));
		}
		if (ecrf != null) {
			listEntryTagCriteria.add(Restrictions.eq("ecrfValue", ecrf.booleanValue()));
		}
		if (stratification != null) {
			listEntryTagCriteria.add(Restrictions.eq("stratification", stratification.booleanValue()));
		}
		if (probandId != null) {
			listEntryTagCriteria.createCriteria("tagValues", CriteriaSpecification.INNER_JOIN).createCriteria("listEntry", CriteriaSpecification.INNER_JOIN)
					.add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		applySortOrders(listEntryTagCriteria);
		return CriteriaUtil.listDistinctRoot(listEntryTagCriteria, this, "trial.id", "position");
	}

	@Override
	protected Collection<ProbandListEntryTag> handleFindByTrialFieldJs(Long trialId,
			Long fieldId, boolean sort, Boolean js, PSFVO psf) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ProbandListEntryTag.class, listEntryTagCriteria);
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (fieldId != null) {
			listEntryTagCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		if (js != null) {
			if (js) {
				listEntryTagCriteria.add(Restrictions.and(Restrictions.ne("jsVariableName", ""), Restrictions.isNotNull("jsVariableName")));
			} else {
				listEntryTagCriteria.add(Restrictions.or(Restrictions.eq("jsVariableName", ""), Restrictions.isNull("jsVariableName")));
			}
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(listEntryTagCriteria);
		}
		return listEntryTagCriteria.list();
	}

	@Override
	protected Collection<ProbandListEntryTag> handleFindByTrialFieldStratificationRandomize(
			Long trialId, Long inputFieldId, Boolean stratification, Boolean randomize) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (inputFieldId != null) {
			listEntryTagCriteria.add(Restrictions.eq("field.id", inputFieldId.longValue()));
		}
		if (stratification != null) {
			listEntryTagCriteria.add(Restrictions.eq("stratification", stratification.booleanValue()));
		}
		if (randomize != null) {
			listEntryTagCriteria.add(Restrictions.eq("randomize", randomize.booleanValue()));
		}
		return listEntryTagCriteria.list();
	}

	@Override
	protected Collection<ProbandListEntryTag> handleFindByTrialJsVariableName(
			Long trialId, String jsVariableName) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		listEntryTagCriteria.add(Restrictions.eq("jsVariableName", jsVariableName));
		return listEntryTagCriteria.list();
	}

	@Override
	protected Collection<ProbandListEntryTag> handleFindByTrialPosition(
			Long trialId, Long position) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (position != null) {
			listEntryTagCriteria.add(Restrictions.eq("position", position.longValue()));
		}
		return listEntryTagCriteria.list();
	}

	@Override
	protected Long handleFindMaxPosition(Long trialId) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		listEntryTagCriteria.setProjection(Projections.max("position"));
		return (Long) listEntryTagCriteria.uniqueResult();
	}

	@Override
	protected long handleGetCount(Long trialId, Boolean startDate) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (trialId != null) {
			listEntryTagCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (startDate != null) {
			if (startDate) {
				listEntryTagCriteria.add(Restrictions.sizeGt("startDates", 0));
			} else {
				listEntryTagCriteria.add(Restrictions.sizeEq("startDates", 0));
			}
		}
		return (Long) listEntryTagCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCountByFieldStratificationRandomize(Long inputFieldId, Boolean stratification, Boolean randomize) throws Exception {
		org.hibernate.Criteria listEntryTagCriteria = createListEntryTagCriteria();
		if (inputFieldId != null) {
			listEntryTagCriteria.add(Restrictions.eq("field.id", inputFieldId.longValue()));
		}
		if (stratification != null) {
			listEntryTagCriteria.add(Restrictions.eq("stratification", stratification.booleanValue()));
		}
		if (randomize != null) {
			listEntryTagCriteria.add(Restrictions.eq("randomize", randomize.booleanValue()));
		}
		return (Long) listEntryTagCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListEntryTag lightProbandListEntryTagOutVOToEntity(LightProbandListEntryTagOutVO lightProbandListEntryTagOutVO) {
		ProbandListEntryTag entity = this.loadProbandListEntryTagFromLightProbandListEntryTagOutVO(lightProbandListEntryTagOutVO);
		this.lightProbandListEntryTagOutVOToEntity(lightProbandListEntryTagOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void lightProbandListEntryTagOutVOToEntity(
			LightProbandListEntryTagOutVO source,
			ProbandListEntryTag target,
			boolean copyIfNull) {
		super.lightProbandListEntryTagOutVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandListEntryTag loadProbandListEntryTagFromLightProbandListEntryTagOutVO(LightProbandListEntryTagOutVO lightProbandListEntryTagOutVO) {
		ProbandListEntryTag probandListEntryTag = this.load(lightProbandListEntryTagOutVO.getId());
		if (probandListEntryTag == null) {
			probandListEntryTag = ProbandListEntryTag.Factory.newInstance();
		}
		return probandListEntryTag;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandListEntryTag loadProbandListEntryTagFromProbandListEntryTagInVO(ProbandListEntryTagInVO probandListEntryTagInVO) {
		ProbandListEntryTag probandListEntryTag = null;
		Long id = probandListEntryTagInVO.getId();
		if (id != null) {
			probandListEntryTag = this.load(id);
		}
		if (probandListEntryTag == null) {
			probandListEntryTag = ProbandListEntryTag.Factory.newInstance();
		}
		return probandListEntryTag;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandListEntryTag loadProbandListEntryTagFromProbandListEntryTagOutVO(ProbandListEntryTagOutVO probandListEntryTagOutVO) {
		ProbandListEntryTag probandListEntryTag = this.load(probandListEntryTagOutVO.getId());
		if (probandListEntryTag == null) {
			probandListEntryTag = ProbandListEntryTag.Factory.newInstance();
		}
		return probandListEntryTag;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListEntryTag probandListEntryTagInVOToEntity(ProbandListEntryTagInVO probandListEntryTagInVO) {
		ProbandListEntryTag entity = this.loadProbandListEntryTagFromProbandListEntryTagInVO(probandListEntryTagInVO);
		this.probandListEntryTagInVOToEntity(probandListEntryTagInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandListEntryTagInVOToEntity(
			ProbandListEntryTagInVO source,
			ProbandListEntryTag target,
			boolean copyIfNull) {
		super.probandListEntryTagInVOToEntity(source, target, copyIfNull);
		target.setTitleL10nKey(source.getTitle());
		Long fieldId = source.getFieldId();
		Long trialId = source.getTrialId();
		if (fieldId != null) {
			InputField field = this.getInputFieldDao().load(fieldId);
			target.setField(field);
			field.addListEntryTags(target);
		} else if (copyIfNull) {
			InputField field = target.getField();
			target.setField(null);
			if (field != null) {
				field.removeListEntryTags(target);
			}
		}
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addListEntryTags(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeListEntryTags(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListEntryTag probandListEntryTagOutVOToEntity(ProbandListEntryTagOutVO probandListEntryTagOutVO) {
		ProbandListEntryTag entity = this.loadProbandListEntryTagFromProbandListEntryTagOutVO(probandListEntryTagOutVO);
		this.probandListEntryTagOutVOToEntity(probandListEntryTagOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandListEntryTagOutVOToEntity(
			ProbandListEntryTagOutVO source,
			ProbandListEntryTag target,
			boolean copyIfNull) {
		super.probandListEntryTagOutVOToEntity(source, target, copyIfNull);
		InputFieldOutVO fieldVO = source.getField();
		TrialOutVO trialVO = source.getTrial();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (fieldVO != null) {
			InputField field = this.getInputFieldDao().inputFieldOutVOToEntity(fieldVO);
			target.setField(this.getInputFieldDao().inputFieldOutVOToEntity(fieldVO));
			field.addListEntryTags(target);
		} else if (copyIfNull) {
			InputField field = target.getField();
			target.setField(null);
			if (field != null) {
				field.removeListEntryTags(target);
			}
		}
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addListEntryTags(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeListEntryTags(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public LightProbandListEntryTagOutVO toLightProbandListEntryTagOutVO(final ProbandListEntryTag entity) {
		return super.toLightProbandListEntryTagOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toLightProbandListEntryTagOutVO(
			ProbandListEntryTag source,
			LightProbandListEntryTagOutVO target) {
		super.toLightProbandListEntryTagOutVO(source, target);
		target.setUniqueName(getUniqueProbandListEntryTagName(source));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListEntryTagInVO toProbandListEntryTagInVO(final ProbandListEntryTag entity) {
		return super.toProbandListEntryTagInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandListEntryTagInVO(
			ProbandListEntryTag source,
			ProbandListEntryTagInVO target) {
		super.toProbandListEntryTagInVO(source, target);
		target.setTitle(source.getTitleL10nKey());
		InputField field = source.getField();
		Trial trial = source.getTrial();
		if (field != null) {
			target.setFieldId(field.getId());
		}
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListEntryTagOutVO toProbandListEntryTagOutVO(final ProbandListEntryTag entity) {
		return super.toProbandListEntryTagOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandListEntryTagOutVO(
			ProbandListEntryTag source,
			ProbandListEntryTagOutVO target) {
		super.toProbandListEntryTagOutVO(source, target);
		InputField field = source.getField();
		Trial trial = source.getTrial();
		User modifiedUser = source.getModifiedUser();
		target.setTitle(source.getTitleL10nKey());
		if (field != null) {
			target.setField(this.getInputFieldDao().toInputFieldOutVO(field));
			if (field.isLocalized()) {
				target.setTitle(L10nUtil.getInputFieldTitle(Locales.USER, source.getTitleL10nKey()));
			}
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setUniqueName(getUniqueProbandListEntryTagName(target));
	}
}